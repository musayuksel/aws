AWSTemplateFormatVersion: "2010-09-09"
Description: Creates a test pipeline to build and deploy a website.
# Parameters:
#   GitHubRepo:
#     Type: String
#     Description: The name of the GitHub repo with your AWS cloudformation stacks
#   GitHubBranch:
#     Type: String
#     Description: The git branch you wish to deploy. Used in both the Source Stage and the Webhook.
#     Default: main
#   CodeBuildImage:
#     Type: String
#     Description: The Docker Image to use for CodeBuild Project(s)
#     Default: aws/codebuild/standard:5.0
#   CodeStarConnectionArn:
#     Type: String
#     Description: The ARN of the CodeStar connection. App Admin should have set this up and you can find it by logging into your account and visiting https://eu-west-1.console.aws.amazon.com/codesuite/settings/connections
#   CodePipelineName:
#     Type: String
#     Description: The name of the pipeline
#   DevAWSAccountID:
#     Type: String
#     Description: ID of the AWS Dev Account
#   ProdAWSAccountID:
#     Type: String
#     Description: ID of the AWS Prod Account

Resources:
  # Create an S3 bucket to store website files and pipeline artifacts.
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: musa-website-test-bucket-123123
      WebsiteConfiguration:
        IndexDocument: index.html
        # ErrorDocument: index.html

  # Define an IAM role for Codepipeline to access resources
  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: # Which AWS services can assume this role
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com # Allow CodePipeline to assume this role
                - codebuild.amazonaws.com # Allow CodeBuild to assume this role
            Action: sts:AssumeRole
      Policies: # Attach policy to the role to allow specific action.
        - PolicyName: CodePipelinePolicy # Name of the policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:* # Allow all actions on S3
                  - codebuild:* # Allow all actions on CodeBuild
                  - codepipeline:* # Allow all actions on CodePipeline
                  - secretsmanager:GetSecretValue # Allow access to Secrets Manager
                  - iam:PassRole # Allow passing roles to other services
                  - logs:* # Allow all actions on CloudWatch Logs
                Resource: "*" # Allow access to all resources

  # Create a CodeBuild project to build the website.
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: musa-website-build-project # Name of the project
      Source:
        Type: GITHUB # Source is Github repository aws repo in musayuksel account
        Location: https://github.com/musayuksel/aws.git # Create the CodePipeline resource.
      Artifacts:
        Type: S3 # Store the build artifacts in S3
        Location: !Ref S3Bucket # Reference to the S3 bucket created above
      Environment:
        Type: LINUX_CONTAINER # Use a Linux container for the build
        ComputeType: BUILD_GENERAL1_SMALL # Use a small compute type
        Image: aws/codebuild/standard:6.0 # Standard build environment image
      ServiceRole: !GetAtt PipelineRole.Arn # Use the IAM role created above

  # Create a CodePipeline to automate the build and deployment process.
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt PipelineRole.Arn # Links the IAM role created above to the pipeline.
      Stages:
        # Pulls code from Github
        - Name: Source
          Actions:
            - Name: SourceAction # Name of the action in this stage
              ActionTypeId:
                Category: Source # This is a source stage
                Owner: ThirdParty # Github is a third party service
                Provider: GitHub # Source repository is Github
                Version: "1" # Version of the action
              Configuration:
                Owner: musayuksel # Owner of the repository
                Repo: aws # Repository name
                Branch: main # Branch to pull code from
                OAuthToken: "github_pat_test"
                # OAuthToken: !Ref GitHubToken # # Reference to the GitHub token stored in Secrets Manager. Add this token to the secrets manager
              OutputArtifacts:
                - Name: SourceOutput # The artifact produced by this stage

        # Builds stage - Use CodeBuild to build the website
        - Name: Build
          Actions:
            - Name: BuildAction # Name of the build action
              ActionTypeId:
                Category: Build # This is a build stage
                Owner: AWS # AWS owns the build service
                Provider: CodeBuild # Use CodeBuild as the build service
                Version: "1" # Version of the action
              Configuration:
                ProjectName: !Ref CodeBuildProject # Reference to the CodeBuild project
              InputArtifacts:
                - Name: SourceOutput # The artifact produced by the source stage
              OutputArtifacts:
                - Name: BuildOutput # The artifact produced by this stage

        # Deploy Stage: Deploys the built artifact to S3
        - Name: Deploy
          Actions:
            - Name: DeployAction # Name of the deploy action
              ActionTypeId:
                Category: Deploy # This is a deploy stage
                Owner: AWS # AWS owns the deploy service
                Provider: S3 # Use S3 as the deploy service
                Version: "1" # Version of the action
              Configuration:
                BucketName: !Ref S3Bucket # Reference to the S3 bucket
                Extract: "true" # Extract the artifact before deploying
              InputArtifacts:
                - Name: BuildOutput # The artifact produced by the build stage
      ArtifactStore:
        Type: S3 # Store the pipeline artifacts in S3
        Location: !Ref S3Bucket # Reference to the S3 bucket created above

Parameters:
  GitHubToken:
    Type: String
    Description: "The GitHub OAuth token"
# in the secrets manager, add the token as a secret with the a name
# example: musa-github-token
# and add the token as the value
# when creating the stack, add the token as a parameter with the same name- musa-github-token

# Resources:
#   CodeBuildProject:
#     Type: AWS::CodeBuild::Project
#     Properties:
#       Artifacts:
#         Type: CODEPIPELINE
#       TimeoutInMinutes: 5
#       Description: CodeBuild project to build
#       Environment:
#         ComputeType: BUILD_GENERAL1_SMALL
#         Image: !Ref CodeBuildImage
#         Type: LINUX_CONTAINER
#         EnvironmentVariables:
#           - Name: ARTIFACTS_BUCKET
#             Type: PLAINTEXT
#             Value: !ImportValue ci-core-infra-artifacts-bucket-name
#       ServiceRole: !ImportValue ci-core-infra-common-codebuild-role-arn
#       EncryptionKey: "alias/codepipeline-kms-key"
#       Source:
#         Type: CODEPIPELINE
#         BuildSpec: |
#           version: 0.2
#           phases:
#             build:
#               commands:
#                 - aws cloudformation package --template-file main.yml --s3-bucket $ARTIFACTS_BUCKET --s3-prefix artifacts/some-lambda --output-template-file main.packaged.yml
#           artifacts:
#             files:
#               - main.packaged.yml

#   CodePipeline:
#     Type: AWS::CodePipeline::Pipeline
#     Properties:
#       ArtifactStore:
#         Type: S3
#         Location: !ImportValue ci-core-infra-artifacts-bucket-name
#         EncryptionKey:
#           Id: !ImportValue ci-core-infra-artifacts-kms-key-arn
#           Type: "KMS"
#       Name: !Ref CodePipelineName
#       RestartExecutionOnUpdate: true
#       RoleArn: !ImportValue ci-core-infra-codepipeline-execution-role-arn
#       Stages:
#         - Name: Source
#           Actions:
#             - ActionTypeId:
#                 Category: Source
#                 Owner: AWS
#                 Version: "1"
#                 Provider: CodeStarSourceConnection
#               OutputArtifacts:
#                 - Name: GitHubSource
#               RunOrder: 1
#               Name: Clone-From-GitHub
#               Configuration:
#                 ConnectionArn: !Ref CodeStarConnectionArn
#                 FullRepositoryId: !Ref GitHubRepo
#                 BranchName: !Ref GitHubBranch
#         - Name: Build
#           Actions:
#             - ActionTypeId:
#                 Category: Build
#                 Owner: AWS
#                 Version: "1"
#                 Provider: CodeBuild
#               InputArtifacts:
#                 - Name: GitHubSource
#               OutputArtifacts:
#                 - Name: BuiltSource
#               Name: Build
#               Configuration:
#                 ProjectName: !Ref CodeBuildProject
#         - Name: Deploy-to-dev
#           Actions:
#             - ActionTypeId:
#                 Category: Deploy
#                 Owner: AWS
#                 Version: "1"
#                 Provider: CloudFormation
#               InputArtifacts:
#                 - Name: BuiltSource
#               Name: Deploy-Lambda
#               Configuration:
#                 ActionMode: CREATE_UPDATE
#                 Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
#                 StackName: "some-lambda"
#                 RoleArn: !Sub "arn:aws:iam::${DevAWSAccountID}:role/codepipeline-cloudformation-role"
#                 TemplatePath: BuiltSource::main.packaged.yml
#               RoleArn: !Sub "arn:aws:iam::${DevAWSAccountID}:role/codepipeline-role"
#         - Name: Deploy-to-prod
#           Actions:
#             - ActionTypeId:
#                 Category: Deploy
#                 Owner: AWS
#                 Version: "1"
#                 Provider: CloudFormation
#               InputArtifacts:
#                 - Name: BuiltSource
#               Name: Deploy-Lambda
#               Configuration:
#                 ActionMode: CREATE_UPDATE
#                 Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
#                 StackName: "some-lambda"
#                 RoleArn: !Sub "arn:aws:iam::${ProdAWSAccountID}:role/codepipeline-cloudformation-role"
#                 TemplatePath: BuiltSource::main.packaged.yml
#               RoleArn: !Sub "arn:aws:iam::${ProdAWSAccountID}:role/codepipeline-role"
